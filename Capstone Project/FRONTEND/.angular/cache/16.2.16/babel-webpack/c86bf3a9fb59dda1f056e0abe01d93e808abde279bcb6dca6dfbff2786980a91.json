{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nexport let CatalogComponent = class CatalogComponent {\n  constructor(api, auth) {\n    this.api = api;\n    this.auth = auth;\n    this.products = [];\n    this.filteredProducts = [];\n    this.categories = [];\n    this.searchTerm = '';\n    this.selectedCategory = '';\n    this.placeholder = 'https://via.placeholder.com/200x150?text=No+Image';\n  }\n  ngOnInit() {\n    this.loadProducts();\n  }\n  loadProducts() {\n    this.api.products().subscribe({\n      next: res => {\n        this.products = res;\n        this.filteredProducts = [...this.products];\n        this.categories = Array.from(new Set(this.products.map(p => p.category))).filter(c => c);\n      },\n      error: err => console.error('Error loading products', err)\n    });\n  }\n  applyFilters() {\n    this.filteredProducts = this.products.filter(p => {\n      const matchesName = p.name.toLowerCase().includes(this.searchTerm.toLowerCase());\n      const matchesCategory = this.selectedCategory ? p.category === this.selectedCategory : true;\n      return matchesName && matchesCategory;\n    });\n  }\n  addToCart(p) {\n    if (!this.auth.userId) {\n      alert('Please login first!');\n      return;\n    }\n    let cart = JSON.parse(localStorage.getItem('cart') || '[]');\n    cart.push({\n      product: p,\n      quantity: 1\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    this.auth.cartCount = cart.length;\n    alert('Added to cart');\n  }\n  onImgError(event) {\n    event.target.src = this.placeholder;\n  }\n};\nCatalogComponent = __decorate([Component({\n  selector: 'catalog',\n  template: `\n    <h3 class=\"my-4 text-center fw-bold\">PRODUCTS</h3>\n\n \n\n    <!-- Product Grid -->\n    <div class=\"row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4\">\n      <div class=\"col\" *ngFor=\"let p of filteredProducts\">\n        <div class=\"card h-100 flipkart-card\">\n          <!-- Image -->\n          <div class=\"card-img-wrapper\">\n            <img [src]=\"p.image || placeholder\" alt=\"{{p.name}}\" (error)=\"onImgError($event)\">\n          </div>\n\n          <!-- Card Body -->\n          <div class=\"card-body d-flex flex-column\">\n            <h6 class=\"product-title text-truncate\" [title]=\"p.name\">{{ p.name }}</h6>\n            <p class=\"product-description text-truncate\" [title]=\"p.description\">{{ p.description }}</p>\n            <p class=\"product-category text-muted\">{{ p.category }}</p>\n\n            <!-- Price & Stock -->\n            <div class=\"price-stock mt-auto d-flex justify-content-between align-items-center\">\n              <span class=\"fw-bold text-dark\">â‚¹ {{ p.price }}</span>\n             \n            </div>\n <div class=\"badge bg-light text-dark\">{{ p.quantity }} in stock</d>\n            <!-- Add to Cart Button -->\n            <button \n              class=\"btn btn-success w-100 mt-2 fw-semibold\"\n              (click)=\"addToCart(p)\"\n              [disabled]=\"!auth.isLoggedIn() || p.quantity === 0\"\n            >\n              Add  Cart\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .flipkart-card {\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n      border-radius: 0.5rem;\n      border: none;\n      box-shadow: 0 2px 6px rgba(0,0,0,0.1);\n      background-color: #fff;\n    }\n    .flipkart-card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n    }\n .card-img-wrapper {\n  width: 100%;\n  height: 200px;\n \n  border:20px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  border-radius: 0.8rem 0.8rem 0 0;\n  box-shadow: inset 0 2px 6px rgba(0,0,0,0.05);\n}\n    .card-img-wrapper img {\n      max-height: 100%;\n      max-width: 100%;\n      object-fit: contain;\n      transition: transform 0.3s ease;\n    }\n    .flipkart-card:hover .card-img-wrapper img {\n      transform: scale(1.05);\n    }\n    .product-title { font-size: 0.9rem; font-weight: 500; }\n    .product-description { font-size: 0.8rem; color: #555; margin: 0.2rem 0; }\n    .product-category { font-size: 0.8rem; color: #777; }\n    .price-stock span { font-size: 0.85rem; }\n    .btn-warning { color: #212529; font-size: 0.85rem; }\n    @media (max-width: 576px) { .card-img-wrapper { height: 150px; } }\n  `]\n})], CatalogComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}